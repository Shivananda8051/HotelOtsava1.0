import React, { useEffect, useState, useRef } from "react";
import { Pie, Bar } from 'react-chartjs-2';
import { Chart as ChartJS, ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement } from 'chart.js';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

// Register ChartJS components
ChartJS.register(ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement);

const SemgrepResults = () => {
  const [semgrepResults, setSemgrepResults] = useState(null);
  const [selectedIssue, setSelectedIssue] = useState(null);
  const [expandedFiles, setExpandedFiles] = useState({});
  const reportRef = useRef();

  useEffect(() => {
    const storedResults = sessionStorage.getItem("semgrepResults");
    if (storedResults) {
      try {
        const parsedResults = JSON.parse(storedResults);
        // Normalize severity levels
        const normalizedResults = parsedResults.map(file => ({
          ...file,
          semgrep: file.semgrep?.map(issue => ({
            ...issue,
            severity: normalizeSeverity(issue.severity)
          }))
        }));
        setSemgrepResults(normalizedResults);
        
        // Initialize all files as collapsed
        const initialExpandedState = {};
        parsedResults.forEach((_, index) => {
          initialExpandedState[index] = false;
        });
        setExpandedFiles(initialExpandedState);
      } catch (e) {
        console.error("Failed to parse Semgrep results:", e);
      }
    }
  }, []);

  const normalizeSeverity = (severity) => {
    if (!severity) return 'Low';
    const lowerSeverity = severity.toLowerCase();
    if (lowerSeverity.includes('high') || lowerSeverity.includes('error')) return 'High';
    if (lowerSeverity.includes('medium') || lowerSeverity.includes('warning')) return 'Medium';
    return 'Low';
  };

  const toggleFileExpand = (fileIndex) => {
    setExpandedFiles(prev => ({
      ...prev,
      [fileIndex]: !prev[fileIndex]
    }));
  };

  const getSeverityColor = (severity) => {
    switch (severity?.toLowerCase()) {
      case 'high': return '#ff5252';
      case 'medium': return '#ffab40';
      case 'low': return '#40c4ff';
      default: return '#b0bec5';
    }
  };

  // Prepare data for charts
  const prepareChartData = () => {
    if (!semgrepResults) return { pieData: null, barData: null };
    
    const severityCounts = { High: 0, Medium: 0, Low: 0 };
    const ruleCounts = {};
    
    semgrepResults.forEach(file => {
      file.semgrep?.forEach(issue => {
        const severity = normalizeSeverity(issue.severity);
        severityCounts[severity] = (severityCounts[severity] || 0) + 1;
        
        if (issue.rule_id) {
          ruleCounts[issue.rule_id] = (ruleCounts[issue.rule_id] || 0) + 1;
        }
      });
    });
    
    // Sort rules by count and take top 5
    const topRules = Object.entries(ruleCounts)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5);
    
    return {
      pieData: {
        labels: ['High', 'Medium', 'Low'],
        datasets: [{
          data: [severityCounts.High, severityCounts.Medium, severityCounts.Low],
          backgroundColor: ['#ff5252', '#ffab40', '#40c4ff'],
          borderWidth: 0,
        }]
      },
      barData: {
        labels: topRules.map(rule => rule[0]),
        datasets: [{
          label: 'Occurrences',
          data: topRules.map(rule => rule[1]),
          backgroundColor: '#00e676',
          borderWidth: 0,
        }]
      }
    };
  };

  const { pieData, barData } = prepareChartData();

  const generateReport = async () => {
    if (!semgrepResults) return;

    // Create a new PDF
    const pdf = new jsPDF('p', 'mm', 'a4');
    const currentDate = new Date();
    const dateStr = currentDate.toLocaleDateString();
    const timeStr = currentDate.toLocaleTimeString();

    // Add report header
    pdf.setFontSize(20);
    pdf.setTextColor(40, 167, 69); // Green color
    pdf.text('SECURITY SCAN REPORT', 105, 20, { align: 'center' });
    
    pdf.setFontSize(12);
    pdf.setTextColor(0, 0, 0); // Black color
    pdf.text(`Generated by: HTS CONSULTING`, 15, 30);
    pdf.text(`Scan Date: ${dateStr}`, 15, 35);
    pdf.text(`Scan Time: ${timeStr}`, 15, 40);

    // Add summary section
    pdf.setFontSize(16);
    pdf.setTextColor(40, 167, 69);
    pdf.text('Scan Summary', 15, 50);
    
    pdf.setFontSize(12);
    pdf.setTextColor(0, 0, 0);
    
    // Calculate totals
    const totalFiles = semgrepResults.length;
    let totalIssues = 0;
    let highIssues = 0;
    let mediumIssues = 0;
    let lowIssues = 0;
    
    semgrepResults.forEach(file => {
      file.semgrep?.forEach(issue => {
        totalIssues++;
        const severity = normalizeSeverity(issue.severity);
        if (severity === 'High') highIssues++;
        else if (severity === 'Medium') mediumIssues++;
        else lowIssues++;
      });
    });

    pdf.text(`Files Scanned: ${totalFiles}`, 15, 60);
    pdf.text(`Total Issues Found: ${totalIssues}`, 15, 65);
    pdf.text(`High Severity Issues: ${highIssues}`, 15, 70);
    pdf.text(`Medium Severity Issues: ${mediumIssues}`, 15, 75);
    pdf.text(`Low Severity Issues: ${lowIssues}`, 15, 80);

    // Add charts (we'll convert them to images)
    const chartsContainer = document.createElement('div');
    chartsContainer.style.width = '180mm';
    chartsContainer.style.padding = '20px';
    chartsContainer.style.background = 'white';
    
    const pieChartDiv = document.createElement('div');
    pieChartDiv.style.height = '100mm';
    pieChartDiv.style.marginBottom = '20px';
    
    const barChartDiv = document.createElement('div');
    barChartDiv.style.height = '100mm';
    
    chartsContainer.appendChild(pieChartDiv);
    chartsContainer.appendChild(barChartDiv);
    
    document.body.appendChild(chartsContainer);
    
    // Render charts to the temporary divs
    const pieCanvas = await html2canvas(document.querySelector('.pie-chart-container canvas'));
    const barCanvas = await html2canvas(document.querySelector('.bar-chart-container canvas'));
    
    pieChartDiv.appendChild(pieCanvas);
    barChartDiv.appendChild(barCanvas);
    
    // Add charts to PDF
    pdf.addPage();
    pdf.setFontSize(16);
    pdf.setTextColor(40, 167, 69);
    pdf.text('Severity Distribution', 105, 20, { align: 'center' });
    pdf.addImage(pieCanvas.toDataURL('image/png'), 'PNG', 30, 30, 150, 80);
    
    pdf.addPage();
    pdf.text('Top 5 Most Frequent Rules', 105, 20, { align: 'center' });
    pdf.addImage(barCanvas.toDataURL('image/png'), 'PNG', 30, 30, 150, 80);
    
    // Clean up
    document.body.removeChild(chartsContainer);

    // Add detailed findings
    pdf.addPage();
    pdf.setFontSize(16);
    pdf.setTextColor(40, 167, 69);
    pdf.text('Detailed Findings', 15, 20);
    
    pdf.setFontSize(10);
    let yPosition = 30;
    
    semgrepResults.forEach((file, fileIndex) => {
      if (file.semgrep?.length > 0) {
        pdf.setFontSize(12);
        pdf.setTextColor(0, 0, 0);
        pdf.text(`File: ${file.filename}`, 15, yPosition);
        yPosition += 7;
        
        // Table header
        pdf.setFillColor(230, 230, 230);
        pdf.rect(15, yPosition, 180, 8, 'F');
        pdf.setTextColor(0, 0, 0);
        pdf.setFont(undefined, 'bold');
        pdf.text('Rule ID', 15, yPosition + 5);
        pdf.text('Severity', 50, yPosition + 5);
        pdf.text('Line', 80, yPosition + 5);
        pdf.text('Message', 100, yPosition + 5);
        yPosition += 10;
        
        pdf.setFont(undefined, 'normal');
        
        file.semgrep.forEach((issue, issueIndex) => {
          if (yPosition > 270) { // Add new page if we're at the bottom
            pdf.addPage();
            yPosition = 20;
          }
          
          pdf.text(issue.rule_id || 'N/A', 15, yPosition + 5);
          
          // Severity with color box
          const severity = normalizeSeverity(issue.severity);
          const severityColor = getSeverityColor(severity);
          const rgb = hexToRgb(severityColor);
          pdf.setFillColor(rgb.r, rgb.g, rgb.b);
          pdf.rect(50, yPosition, 5, 5, 'F');
          pdf.text(severity, 58, yPosition + 5);
          
          pdf.text(issue.line?.toString() || 'N/A', 80, yPosition + 5);
          
          // Split long messages into multiple lines
          const messageLines = pdf.splitTextToSize(issue.message || 'N/A', 80);
          pdf.text(messageLines, 100, yPosition + 5);
          
          yPosition += Math.max(10, messageLines.length * 7);
        });
        
        yPosition += 10; // Add space between files
      }
    });

    // Save the PDF
    pdf.save(`Security_Scan_Report_${dateStr.replace(/\//g, '-')}_${timeStr.replace(/:/g, '-')}.pdf`);
  };

  // Helper function to convert hex color to RGB
  const hexToRgb = (hex) => {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    } : { r: 0, g: 0, b: 0 };
  };

  return (
    <div style={{ 
      display: 'flex',
      height: '100vh',
      width: '100vw',
      margin: 0,
      padding: 0,
      background: '#121212',
      color: '#e0e0e0',
      fontFamily: "'Inter', -apple-system, sans-serif",
      overflow: 'hidden'
    }}>
      {/* Results Panel (Left) */}
      <div style={{
        flex: '0 0 50%',
        height: '100%',
        padding: '24px',
        overflowY: 'auto',
        borderRight: '1px solid #333',
        boxSizing: 'border-box'
      }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <h2 style={{ 
            color: '#00e676', 
            fontSize: '24px',
            fontWeight: '600',
            marginBottom: '16px',
            marginTop: 0
          }}>
            Code Issues
          </h2>
          {semgrepResults && (
            <button 
              onClick={generateReport}
              style={{
                background: '#00e676',
                color: '#121212',
                border: 'none',
                padding: '8px 16px',
                borderRadius: '4px',
                fontWeight: '600',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                height: '40px'
              }}
            >
              <span>Generate Report</span>
            </button>
          )}
        </div>
        
        {!semgrepResults ? (
          <div style={{
            background: '#1e1e1e',
            padding: '40px',
            borderRadius: '12px',
            textAlign: 'center'
          }}>
            <p style={{ color: '#9e9e9e' }}>
              No analysis results found. Please upload your files and run the scan.
            </p>
          </div>
        ) : (
          <div style={{ display: 'grid', gap: '12px' }}>
            {semgrepResults.map((result, fileIndex) => (
              <div key={fileIndex} style={{
                background: '#1e1e1e',
                borderRadius: '8px',
                overflow: 'hidden'
              }}>
                <div 
                  style={{
                    padding: '16px',
                    background: '#252525',
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center',
                    cursor: 'pointer'
                  }}
                  onClick={() => toggleFileExpand(fileIndex)}
                >
                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                    <span style={{ 
                      color: '#00e676',
                      fontWeight: '500'
                    }}>
                      {result.filename}
                    </span>
                    <span style={{
                      background: '#333',
                      color: '#fff',
                      borderRadius: '12px',
                      padding: '2px 8px',
                      fontSize: '12px'
                    }}>
                      {result.semgrep?.length || 0} issues
                    </span>
                  </div>
                  <span style={{ 
                    transform: expandedFiles[fileIndex] ? 'rotate(180deg)' : 'rotate(0deg)',
                    transition: 'transform 0.2s ease'
                  }}>
                    ▼
                  </span>
                </div>
                
                {expandedFiles[fileIndex] && (
                  <div style={{ padding: '16px' }}>
                    {result.semgrep?.length > 0 ? (
                      <div style={{ 
                        display: 'grid',
                        gap: '16px'
                      }}>
                        <div style={{
                          display: 'grid',
                          gridTemplateColumns: '1fr 1fr 1fr 3fr',
                          gap: '12px',
                          padding: '8px 0',
                          borderBottom: '1px solid #333',
                          fontWeight: '600'
                        }}>
                          <div>Rule ID</div>
                          <div>Severity</div>
                          <div>Line</div>
                          <div>Message</div>
                        </div>
                        
                        {result.semgrep.map((item, issueIndex) => (
                          <div 
                            key={issueIndex}
                            style={{
                              display: 'grid',
                              gridTemplateColumns: '1fr 1fr 1fr 3fr',
                              gap: '12px',
                              alignItems: 'center',
                              padding: '12px 0',
                              borderBottom: '1px solid #252525',
                              cursor: 'pointer',
                              ':hover': {
                                background: '#252525'
                              }
                            }}
                            onClick={() => setSelectedIssue(`${fileIndex}-${issueIndex}`)}
                          >
                            <div style={{ fontWeight: '500' }}>{item.rule_id}</div>
                            <div>
                              <span style={{
                                background: getSeverityColor(item.severity) + '33',
                                color: getSeverityColor(item.severity),
                                borderRadius: '4px',
                                padding: '2px 8px',
                                fontSize: '12px',
                                display: 'inline-block'
                              }}>
                                {item.severity}
                              </span>
                            </div>
                            <div>{item.line}</div>
                            <div style={{ 
                              whiteSpace: 'nowrap',
                              overflow: 'hidden',
                              textOverflow: 'ellipsis'
                            }}>
                              {item.message}
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div style={{ 
                        textAlign: 'center',
                        padding: '16px',
                        color: '#9e9e9e'
                      }}>
                        No issues found in this file
                      </div>
                    )}
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
      
      {/* Analytics Panel (Right) */}
      <div style={{
        flex: '0 0 50%',
        height: '100%',
        padding: '24px',
        overflowY: 'auto',
        background: '#1a1a1a',
        boxSizing: 'border-box'
      }} ref={reportRef}>
        <h2 style={{ 
          color: '#00e676', 
          fontSize: '24px',
          fontWeight: '600',
          marginBottom: '16px',
          marginTop: 0
        }}>
          Security Analysis
        </h2>
        
        {semgrepResults ? (
          <div style={{ display: 'grid', gap: '32px' }}>
            {/* Severity Distribution Pie Chart */}
            <div className="pie-chart-container" style={{ background: '#252525', borderRadius: '12px', padding: '20px' }}>
              <h3 style={{ marginTop: 0, marginBottom: '16px' }}>Issue Severity Distribution</h3>
              <div style={{ height: '300px' }}>
                {pieData && <Pie 
                  data={pieData}
                  options={{
                    maintainAspectRatio: false,
                    plugins: {
                      legend: {
                        position: 'right',
                        labels: {
                          color: '#e0e0e0'
                        }
                      },
                      tooltip: {
                        callbacks: {
                          label: (context) => {
                            const label = context.label || '';
                            const value = context.raw || 0;
                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                            const percentage = Math.round((value / total) * 100);
                            return `${label}: ${value} (${percentage}%)`;
                          }
                        }
                      }
                    }
                  }}
                />}
              </div>
            </div>
            
            {/* Top Rules Bar Chart */}
            <div className="bar-chart-container" style={{ background: '#252525', borderRadius: '12px', padding: '20px' }}>
              <h3 style={{ marginTop: 0, marginBottom: '16px' }}>Top 5 Most Frequent Rules</h3>
              <div style={{ height: '300px' }}>
                {barData && <Bar 
                  data={barData}
                  options={{
                    maintainAspectRatio: false,
                    responsive: true,
                    scales: {
                      x: {
                        grid: {
                          color: 'rgba(255, 255, 255, 0.1)'
                        },
                        ticks: {
                          color: '#e0e0e0'
                        }
                      },
                      y: {
                        grid: {
                          color: 'rgba(255, 255, 255, 0.1)'
                        },
                        ticks: {
                          color: '#e0e0e0'
                        },
                        beginAtZero: true
                      }
                    },
                    plugins: {
                      legend: {
                        display: false
                      }
                    }
                  }}
                />}
              </div>
            </div>
            
            {/* Selected Issue Details */}
            {selectedIssue && (() => {
              const [fileIdx, issueIdx] = selectedIssue.split('-').map(Number);
              const issue = semgrepResults[fileIdx].semgrep[issueIdx];
              return (
                <div style={{ background: '#252525', borderRadius: '12px', padding: '20px' }}>
                  <h3 style={{ marginTop: 0, marginBottom: '16px' }}>Issue Details</h3>
                  <div style={{ 
                    display: 'grid',
                    gridTemplateColumns: '120px 1fr',
                    gap: '12px',
                    alignItems: 'start'
                  }}>
                    <div style={{ color: '#9e9e9e', padding: '8px 0' }}>File:</div>
                    <div style={{ padding: '8px 0' }}>{semgrepResults[fileIdx].filename}</div>
                    
                    <div style={{ color: '#9e9e9e', padding: '8px 0' }}>Rule ID:</div>
                    <div style={{ padding: '8px 0' }}>{issue.rule_id}</div>
                    
                    <div style={{ color: '#9e9e9e', padding: '8px 0' }}>Severity:</div>
                    <div style={{ padding: '8px 0' }}>
                      <span style={{
                        background: getSeverityColor(issue.severity) + '33',
                        color: getSeverityColor(issue.severity),
                        borderRadius: '4px',
                        padding: '4px 8px',
                        fontSize: '12px'
                      }}>
                        {issue.severity}
                      </span>
                    </div>
                    
                    <div style={{ color: '#9e9e9e', padding: '8px 0' }}>Location:</div>
                    <div style={{ padding: '8px 0' }}>Line {issue.line}</div>
                    
                    <div style={{ color: '#9e9e9e', padding: '8px 0' }}>Message:</div>
                    <div style={{ padding: '8px 0' }}>{issue.message}</div>
                    
                    <div style={{ color: '#9e9e9e', padding: '8px 0' }}>Code:</div>
                    <div style={{ padding: '8px 0' }}>
                      <pre style={{
                        background: '#121212',
                        padding: '12px',
                        borderRadius: '4px',
                        overflowX: 'auto',
                        margin: 0,
                        fontFamily: "'Fira Code', monospace",
                        whiteSpace: 'pre-wrap',
                        wordWrap: 'break-word'
                      }}>
                        {issue.code}
                      </pre>
                    </div>
                  </div>
                </div>
              );
            })()}
          </div>
        ) : (
          <div style={{
            background: '#252525',
            padding: '40px',
            borderRadius: '12px',
            textAlign: 'center'
          }}>
            <p style={{ color: '#9e9e9e' }}>
              Analytics will appear here after scan results are available
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default SemgrepResults;